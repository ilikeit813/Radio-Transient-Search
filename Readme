Radio Transient Search
====================

Python Radio Transient Search Project

Pipeline:
    01. Use waterfall.sh to produce coarse spectrogram
    02. Use chkwaterfall.sh to check if there are uncontinue file.
    03. If there are broken frames, that can't be FFT, use interpolate to insert the files.
    04. Use eyexam.py to do final check if there are missing file, if still there are missing file, create a mean spectrogram from 2 nearby spectrograms to interpolate.py and insert it. 
    05. Use waterfallcombine.py to combine the individual npy files into a waterfall.npy
    (An example of waterfall.npy is available at https://drive.google.com/file/d/0BwU6yJVYOcbXbXJkXzRKNnM1R1E/view?usp=sharing)
    The file size is 420MB, with two tuning centering at 42, 74MHz, the temporal and channel bin size is 14 sec and 4.7KHz. The observation is tracking at a milli-second pulsar with giant pulse. Becasue the this is a coarse spectrogram, you won't see giant or regular pulses. The dimension of the file is (6408, 2, 4095) which means (temporal bins, tunnings, frequency channels). Tuning is 42MHz for 0, 74MHz for 1. 
    
    06. Use watchwaterfall.py to view the spectrogram (waterfall.npy).
    07. Watch the spectrogram (bandpasscheck.py) to find a comfort zone which is RFI quiet, which is find out the low freqency(fcl),high frequency (fch) to be used in ft.sh and dv.sh. For example, in 16MHz band width from 34 to 50MHz, RFI is relatively low at 41-42MHz (then fcl = 41MHz, fch = 42MHz). A typical spectrogram of 4 hours centering at 42, 74 MHz with 16MHz bandwidth looks like "Low.png"(42MHz), "High.png" (74MHz) which is baseline, bandpass, RFI corrected.
    In the given example, one of RFI comfort zones is 40.6-42.2MHz and 66.6-68.1MHz.
    
    08. Use ft.sh to produce spectrogram again with new frequency tunning you favorite (fcl, fch). In the example, the frequency bins of RFI comfort zone is 1700-2100 and high 670-1070 out of 4095(LFFT-1)
    09. Check the file continuity again using chkspectrogram.sh, eyexam.py
    10. If there are broken frames, that can't be FFT, use interpolate.py to insert the files.    
    11. Use freqtint.py to generate the tInt(temporal resolution constant), freq1, freq2 for dv.sh.(frequency information)
    12. Use dv.sh (change the pol =1 or 2 for low or high tunning in dv.py) to dedisperse spectrogram and generate candidates list.
    13. After generate the candidate txt, use awk and gnuplot to do eye examine. For example: under os X usd command line:
    awk '{if($4<2135 || $4>2145) print $4,$3,$2-5}' "jamie.txt" > plot.txt
    to fliter out candidate with in time range 2135-2145, and save the result in order of time($4), DM($3), S/N($2) -5 into plot.txt
    then use gnuplot, afer inter the gnuplot command mode, use command
    plot 'plot.txt' using 1:2:3 with points pt 6 ps var
    to plot the scatter plot, x is time, y is DM trials, radius proportional to S/N. the example file of jamie.txt(19.9MB) is available in the following link
    https://drive.google.com/file/d/0BwU6yJVYOcbXc25HQl9ZV1I2Ulk/view?usp=sharing
    In the jamie.txt, the column is #, S/N, DM, event time (s) in the reference of start time, decimation resolution(s), channel resolution(MHz), ceteral frequency(MHz, mean, R.M.S.
    14. Plot the spectrogram if you think you found one!!! use cadisp.py to generate the spectrogram, use cadiplot.py to plot it.


ft.sh (need ft.py, dp.py,drx.py,errors.py)
    Use this code to do FFT on raw binary observation data to Numpy arry format   
    for further analysis. Requires ft.py, errors.py, drx.y, dp.py to get job
    done.

dv.sh (need dv.py, dp.py, drx.py, errors.py, disper.py)
    Use this code to parallelly excute dv.py, which will looking for transient.
    Need to determine how many processors/nodes needed. This depends on the
    limitation of memory size. For example, if the data is 1T and a node provide
    256G, then at least 8 nodes is need. (the extra 1T is for temporal storeage) 
    
dv.py
    This code Read in a spectrogram in Numpy array form, mask out the radio
    frequency interference, use MPI to parallel compute the dedispersed time
    series with Dispersion measure trials, record candicates over criterions in
    text files.

drx.py
    Bridge betwen format by LWA DRSU and Python/Numpy format 

dp.py
    define constants

errors.py
    define error response

disper.py
    calculate the DM spacing which dependent on the SNR smearing torrence (SSratio)
    , current DM trial (DMtrial), observing central frequency (nuCenteralMHz), 
    frequency channel width (channelMHz), whole bandwidth (BMHz) and temporal bin
    resolution(temporal_resol)
    
SQL.py
    Convert the text files into SQL format database.

web.py or plot.py
    web.py: Read in the SQL database and plot the Cordes&McLaughlin style plot in
    user's browser.

watchwaterfall.py
    Plot the spectrogram of waterfall.npy

plot.py: Read in text file plot the Cordes&McLaughlin style plot on your screen.

For more detail please find my thesis at Virginia Tech ETD or this link
http://hdl.handle.net/10919/70886

Jr-Wei Tsai
