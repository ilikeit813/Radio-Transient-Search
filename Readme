Radio Transient Search
====================

Python Radio Transient Search Project

Pipeline:
	0. Use waterfall.sh to produce coarse spectrogram
	0. Use chkwaterfall.sh to check if there are uncontinue file.
	0. Use eyexam.py to do final check if there are missing file, if still there are missing file, create a mean spectrogram from 2 nearby spectrograms to interpolate and insert it. 
	0. Use waterfallcombine.py to combine the individual npy files into a waterfall.npy
	0. Use watchwaterfall.py to view the spectrogram (waterfall.npy)
    0. Watch the spectrogram (watchwaterfall.py) to find a comfort zone which is RFI quiet, which is find out the low freqency(fcl),high frequency (fch) to be used in ft.sh and dv.sh. For example, in 16MHz band width from 34 to 50MHz, RFI is relatively low at 41-42MHz (then fcl = 41MHz, fch = 42MHz)
	0. Use ft.sh to produce spectrogram again with new frequency tunning you favorite (fcl, fch).
	0. Use dv.sh to dedisperse spectrogram and generate candidates list.



ft.sh (need ft.py, dp.py,drx.py,errors.py)
    Use this code to do FFT on raw binary observation data to Numpy arry format   
    for further analysis. Requires ft.py, errors.py, drx.y, dp.py to get job
    done.

dv.sh (need dv.py, dp.py, drx.py, errors.py, disper.py)
    Use this code to parallelly excute dv.py, which will looking for transient.
    Need to determine how many processors/nodes needed. This depends on the
    limitation of memory size. For example, if the data is 1T and a node provide
    256G, then at least 8 nodes is need. (the extra 1T is for temporal storeage) 
    
dv.py
    This code Read in a spectrogram in Numpy array form, mask out the radio
    frequency interference, use MPI to parallel compute the dedispersed time
    series with Dispersion measure trials, record candicates over criterions in
    text files.

drx.py
    Bridge betwen format by LWA DRSU and Python/Numpy format 

dp.py
    define constants

errors.py
    define error response

disper.py
    calculate the DM spacing which dependent on the SNR smearing torrence (SSratio)
    , current DM trial (DMtrial), observing central frequency (nuCenteralMHz), 
    frequency channel width (channelMHz), whole bandwidth (BMHz) and temporal bin
    resolution(temporal_resol)
    
SQL.py
    Convert the text files into SQL format database.

web.py or plot.py
    web.py: Read in the SQL database and plot the Cordes&McLaughlin style plot in
    user's browser.

watchwaterfall.py
	Plot the spectrogram of waterfall.npy

plot.py: Read in text file plot the Cordes&McLaughlin style plot on your screen.

For more detail please find my thesis at Virginia Tech ETD or this link
http://hdl.handle.net/10919/70886

Jr-Wei Tsai
